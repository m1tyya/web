const { defineConfig } = require(`eslint-define-config`);
const { patternsJavascript } = require('../utils/get-file-patterns');
const prettierConfig = require('../prettier.config');

module.exports = defineConfig({
	overrides: [
		{
			files: patternsJavascript(),
			parser: 'esprima',
			plugins: [
				`autofix`,
				`canonical`,
				`destructuring`,
				`prettier`,
				`sort-class-members`,
				`sort-destructure-keys`,
				`sort-keys-fix`,
				`sort`,
				`unicorn`,
			],
			rules: {
				'arrow-body-style': [`warn`, `as-needed`],
				'autofix/prefer-destructuring': [
					`warn`,
					{
						array: false,
						object: true,
					},
				],
				curly: [`warn`, `all`],
				eqeqeq: [`warn`, `smart`],
				'linebreak-style': [`warn`, `unix`],
				'no-case-declarations': `warn`,
				'no-confusing-arrow': `warn`,
				'no-dupe-class-members': `warn`,
				'no-eval': `warn`,
				'no-irregular-whitespace': `warn`,
				'no-iterator': `warn`,
				'no-loop-func': `warn`,
				'no-multi-assign': `warn`,
				'no-new-func': `warn`,
				'no-new-object': `warn`,
				'no-new-wrappers': `warn`,
				'no-param-reassign': `warn`,
				'no-unneeded-ternary': `warn`,
				'no-useless-escape': `warn`,
				'no-var': `warn`,
				'object-shorthand': `warn`,
				'one-var': [`warn`, `never`],
				'prefer-arrow-callback': `warn`,
				'prefer-const': `warn`,
				'prefer-object-spread': `warn`,
				'prefer-rest-params': `warn`,
				'prefer-spread': `warn`,
				'prefer-template': `warn`,
				'prettier/prettier': [`warn`, prettierConfig],
				'sort-class-members/sort-class-members': [
					`warn`,
					{
						order: [],
					},
				],
				'sort-destructure-keys/sort-destructure-keys': [
					`warn`,
					{
						caseSensitive: false,
					},
				],
				'sort-keys-fix/sort-keys-fix': [`warn`, `asc`, { natural: true }],
				'spaced-comment': [
					`warn`,
					`always`,
					{
						markers: [`/`],
					},
				],
				'unicorn/consistent-destructuring': `warn`,
				'unicorn/consistent-function-scoping': `warn`,
				'unicorn/escape-case': `warn`,
				'unicorn/explicit-length-check': `warn`,
				'unicorn/new-for-builtins': `warn`,
				'unicorn/no-array-callback-reference': `warn`,
				'unicorn/no-array-for-each': `warn`,
				'unicorn/no-array-push-push': `warn`,
				'unicorn/no-array-reduce': `warn`,
				'unicorn/no-hex-escape': `warn`,
				'unicorn/no-instanceof-array': `warn`,
				'unicorn/no-negated-condition': `warn`,
				'unicorn/no-nested-ternary': `warn`,
				'unicorn/no-null': `warn`,
				'unicorn/no-typeof-undefined': `warn`,
				'unicorn/no-unreadable-array-destructuring': `warn`,
				'unicorn/no-useless-spread': `warn`,
				'unicorn/number-literal-case': `warn`,
				'unicorn/prefer-array-some': `warn`,
				'unicorn/prefer-at': [`warn`],
				'unicorn/prefer-date-now': `warn`,
				'unicorn/prefer-default-parameters': `warn`,
				'unicorn/prefer-includes': `warn`,
				'unicorn/prefer-logical-operator-over-ternary': `warn`,
				'unicorn/prefer-math-trunc': `warn`,
				'unicorn/prefer-negative-index': `warn`,
				'unicorn/prefer-spread': `warn`,
				'unicorn/prefer-string-replace-all': `warn`,
				'unicorn/prefer-string-starts-ends-with': `warn`,
				'unicorn/prefer-switch': [
					`warn`,
					{
						emptyDefaultCase: `no-default-case`,
					},
				],
				'unicorn/prefer-ternary': `warn`,
				'unicorn/relative-url-style': `warn`,
				'unicorn/require-array-join-separator': `warn`,
				'unicorn/switch-case-braces': `warn`,
				'unicorn/template-indent': `warn`,
				'unicorn/throw-new-error': `warn`,
				yoda: `warn`,
			},
		},
	],
});
2;
